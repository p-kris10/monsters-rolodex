{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","console","log","monsters","map","Searchbox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SACaA,EAAO,SAACC,GAEjB,OACI,sBAAKC,UAAW,iBAAhB,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,WCHlBC,G,MAAW,SAACP,GAGrB,OADAQ,QAAQC,IAAIT,GAER,qBAAKC,UAAU,YAAf,SACKD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,WCPtBO,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aACpC,OAES,uBAAOb,UAAU,SACjBc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCkCPG,E,kDArCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GAEd,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IALL,E,qDASb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAC,SAAYS,S,oBAO5C,WACE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAGlG,OACA,sBAAK/B,UAAU,MAAf,UACC,kDACC,cAAC,EAAD,CACAY,YAAY,SACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAYoB,W,GAhCZI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9cd807b7.chunk.js","sourcesContent":["import './card.styles.css';\r\nexport const Card = (props) => {\r\n\r\n    return(\r\n        <div className ='card-container'>\r\n            <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n            <h1>{props.monster.name}</h1>\r\n        </div>\r\n        \r\n    )\r\n    \r\n}\r\n","import React from 'react';\r\nimport {Card} from '../card/card.component.jsx';\r\nimport './card-list.styles.css'\r\nexport const CardList = (props) => {\r\n\r\n    console.log(props);\r\n    return(\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster =>(\r\n                <Card key={monster.id} monster = {monster}/>\r\n            ))}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\n","import './search-box.styles.css'\r\n\r\nexport const Searchbox = ({placeholder,handleChange}) => {\r\n   return(\r\n      \r\n            <input className='search'\r\n            type='search'\r\n            placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />\r\n       \r\n       \r\n   );\r\n}\r\n","import {Component} from 'react'\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport {Searchbox} from'./components/search-box/search-box.component';\nclass App extends Component{\n  constructor(){\n    super();\n\n    this.state = {\n      monsters : [],\n      searchField : '' \n  };\n}\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({'monsters': users}))\n  }\n  handleChange = (e) =>\n  {\n    this.setState({searchField : e.target.value})\n  };\n\n  render(){\n    const {monsters ,searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    \n   \n      return (\n      <div className=\"App\">\n       <h1>Monsters Rolodex</h1>\n        <Searchbox\n        placeholder='search'\n        handleChange={this.handleChange}\n        />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}